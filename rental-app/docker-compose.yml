services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rental-app-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/rentaly_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    networks:
      - rental-network
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: rental-app-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rentaly_db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./rental-db:/docker-entrypoint-initdb.d
    networks:
      - rental-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rentaly_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: rental-app-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rental-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: rental-app-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@db:5432/rentaly_db?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - rental-network
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy

  node_exporter:
    image: prom/node-exporter:latest
    container_name: rental-app-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    networks:
      - rental-network
    restart: unless-stopped
    platform: linux/amd64

  grafana:
    image: grafana/grafana:latest
    container_name: rental-app-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/postgres-dashboard.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - rental-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  rental-network:
    driver: bridge

volumes:
  db_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local